import streamlit as st
import json
import os

DATA_FILE = "solutions.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
else:
    data = {"tasks": [], "solutions": []}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

st.set_page_config(page_title="–í–∏–∑—É–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–µ—à–µ–Ω–∏–π", layout="wide")
st.title("üìö –í–∏–∑—É–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π")

# --- –í–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
tab1, tab2, tab3 = st.tabs(["üìã –ó–∞–¥–∞–Ω–∏—è", "‚ûï –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—à–µ–Ω–∏–π"])

# === –í–∫–ª–∞–¥–∫–∞ 1: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π ===
with tab1:
    st.subheader("–ó–∞–¥–∞–Ω–∏—è")
    if data["tasks"]:
        for task in data["tasks"]:
            st.markdown(f"**{task['title']}**\n\n{task['description']}")
    else:
        st.info("–ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"):
        title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
        desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"):
            data["tasks"].append({"id": len(data["tasks"]) + 1, "title": title, "description": desc})
            save_data()
            st.success("–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# === –í–∫–ª–∞–¥–∫–∞ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è ===
with tab2:
    st.subheader("–ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ")

    if not data["tasks"]:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ.")
    else:
        task_titles = [f"{t['id']}: {t['title']}" for t in data["tasks"]]
        selected_task = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ", task_titles)
        task_id = int(selected_task.split(":")[0])
        author = st.text_input("–ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞")
        steps_text = st.text_area("–†–µ—à–µ–Ω–∏–µ (—Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —à–∞–≥–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π)")

        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"):
            steps = [s.strip() for s in steps_text.strip().split("\n") if s.strip()]
            data["solutions"].append({
                "task_id": task_id,
                "author": author,
                "steps": steps
            })
            save_data()
            st.success("–†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# === –í–∫–ª–∞–¥–∫–∞ 3: –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—à–µ–Ω–∏–π ===
with tab3:
    st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—à–µ–Ω–∏–π")
    if not data["solutions"]:
        st.info("–†–µ—à–µ–Ω–∏—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        task_map = {t["id"]: t["title"] for t in data["tasks"]}
        selected_task = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ", list(task_map.items()), format_func=lambda x: x[1])
        task_id = selected_task[0]
        filtered = [s for s in data["solutions"] if s["task_id"] == task_id]

        if filtered:
            selected_author = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞", [s["author"] for s in filtered])
            solution = next(s for s in filtered if s["author"] == selected_author)

            st.markdown(f"### üë®‚Äçüéì {selected_author}")
            st.markdown(f"–ó–∞–¥–∞–Ω–∏–µ: **{task_map[task_id]}**")

            step = st.slider("–®–∞–≥", 1, len(solution["steps"]), 1)
            st.info(solution["steps"][step - 1])
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—à–µ–Ω–∏–π –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é.")