import streamlit as st
import requests
import json

from utils import (
    get_api_url, get_token, save_token, 
    get_categories, get_tasks, get_task, 
    get_solutions, get_solution, login, 
    create_task, create_solution, get_ai_chats, 
    get_ai_chat, send_ai_message
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–µ—à–µ–Ω–∏–π",
    page_icon="üìö",
    layout="wide",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'is_authenticated' not in st.session_state:
    st.session_state.is_authenticated = False
if 'token' not in st.session_state:
    st.session_state.token = get_token()
    st.session_state.is_authenticated = st.session_state.token is not None
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'tasks'
if 'selected_task' not in st.session_state:
    st.session_state.selected_task = None
if 'selected_solution' not in st.session_state:
    st.session_state.selected_solution = None
if 'selected_chat' not in st.session_state:
    st.session_state.selected_chat = None

# –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def navigate_to(page):
    st.session_state.current_page = page
    # –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == 'tasks':
        st.session_state.selected_task = None
        st.session_state.selected_solution = None
    elif page == 'ai_assistant':
        st.session_state.selected_chat = None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.rerun() –≤–º–µ—Å—Ç–æ st.experimental_rerun()
    st.rerun()





# –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def render_navbar():
    col1, col2, col3, col4, col5 = st.columns([2, 2, 2, 2, 2])
    
    with col1:
        if st.button("üìö –ó–∞–¥–∞–Ω–∏—è", use_container_width=True):
            navigate_to('tasks')
    with col2:
        if st.button("üí° –†–µ—à–µ–Ω–∏—è", use_container_width=True):
            navigate_to('solutions')
    with col3:
        if st.button("ü§ñ –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", use_container_width=True):
            navigate_to('ai_assistant')
    with col4:
        if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", use_container_width=True):
            navigate_to('create_task')
    with col5:
        if not st.session_state.is_authenticated:
            if st.button("üîë –í–æ–π—Ç–∏", use_container_width=True):
                navigate_to('login')
        else:
            if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
                st.session_state.is_authenticated = False
                st.session_state.token = None
                save_token(None)
                navigate_to('tasks')
    
    st.divider()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π
def render_tasks_page():
    st.title("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–¥–∞–Ω–∏–π")
    
    # –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
    col1, col2, col3 = st.columns([3, 2, 3])
    with col1:
        search_query = st.text_input("üîç –ü–æ–∏—Å–∫", "")
    with col2:
        categories = get_categories()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_list = []
        if isinstance(categories, list):
            categories_list = categories
        elif isinstance(categories, dict) and "results" in categories:
            categories_list = categories["results"]
            
        category_options = ["–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"]
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for cat in categories_list:
            if isinstance(cat, dict) and "name" in cat:
                category_options.append(cat["name"])
        
        selected_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", category_options)
    with col3:
        difficulty_options = ["–í—Å–µ —É—Ä–æ–≤–Ω–∏", "–õ–µ–≥–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–°–ª–æ–∂–Ω—ã–π"]
        selected_difficulty = st.selectbox("–°–ª–æ–∂–Ω–æ—Å—Ç—å", difficulty_options)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    tasks = get_tasks(search_query)

# –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
def render_task_detail():
    task_id = st.session_state.selected_task
    task = get_task(task_id)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º"):
        navigate_to("tasks")
    
    st.title(task["title"])
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {task['category_name']}")
        st.markdown(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {task['difficulty']}")
        st.markdown(f"**–ê–≤—Ç–æ—Ä:** {task['created_by']['username']}")
    with col2:
        if st.button("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ", use_container_width=True):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è..."):
                try:
                    api_url = get_api_url(f"tasks/{task_id}/generate_solution/")
                    response = requests.post(api_url, headers={"Authorization": f"Bearer {st.session_state.token}"})
                    if response.status_code == 200:
                        solution = response.json()
                        st.session_state.selected_solution = solution["id"]
                        navigate_to("solution_detail")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    st.markdown("## –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
    st.write(task["description"])
    
    # –°–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π
    st.markdown("## –†–µ—à–µ–Ω–∏—è")
    solutions = get_solutions(task_id=task_id)
    
    if not solutions:
        st.info("–†–µ—à–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
    else:
        for solution in solutions:
            with st.container(border=True):
                col1, col2 = st.columns([3, 1])
                with col1:
                    author_type = "ü§ñ –ò–ò" if solution["is_ai_generated"] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    st.markdown(f"**–ê–≤—Ç–æ—Ä:** {solution['author']['username']} ({author_type})")
                    st.markdown(f"**–î–æ–±–∞–≤–ª–µ–Ω–æ:** {solution['created_at']}")
                with col2:
                    if st.button("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", key=f"solution_{solution['id']}", use_container_width=True):
                        st.session_state.selected_solution = solution["id"]
                        navigate_to("solution_detail")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
def render_create_task():
    st.title("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
    
    if not st.session_state.is_authenticated:
        st.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        if st.button("–í–æ–π—Ç–∏"):
            navigate_to("login")
        return
    
    with st.form("task_form"):
        title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
        
        categories = get_categories()
        category_options = ["–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"] + [cat["name"] for cat in categories]
        category_dict = {cat["name"]: cat["id"] for cat in categories}
        selected_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", category_options)
        
        difficulty = st.selectbox("–°–ª–æ–∂–Ω–æ—Å—Ç—å", ["easy", "medium", "hard"])
        
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", height=300)
        
        submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        
        if submitted:
            if not title or not description:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            else:
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è..."):
                    try:
                        create_task(
                            title=title,
                            description=description,
                            difficulty=difficulty,
                            category=category_dict[selected_category]
                        )
                        st.success("–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
                        st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º", on_click=lambda: navigate_to("tasks"))
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ—à–µ–Ω–∏—è
def render_solution_detail():
    solution_id = st.session_state.selected_solution
    solution = get_solution(solution_id)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—é"):
        navigate_to("task_detail")
    
    st.title(f"–†–µ—à–µ–Ω–∏–µ: {solution['task_title']}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—à–µ–Ω–∏–∏
    author_type = "ü§ñ –ò–ò" if solution["is_ai_generated"] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    st.markdown(f"**–ê–≤—Ç–æ—Ä:** {solution['author']['username']} ({author_type})")
    st.markdown(f"**–î–æ–±–∞–≤–ª–µ–Ω–æ:** {solution['created_at']}")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    tab1, tab2, tab3 = st.tabs(["üíª –ö–æ–¥", "üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ", "üîç –ü–æ—à–∞–≥–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"])
    
    with tab1:
        st.code(solution["code"], language="python")
    
    with tab2:
        st.write(solution["explanation"])
    
    with tab3:
        steps = solution.get("steps", [])
        if not steps:
            st.info("–ü–æ—à–∞–≥–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è")
        else:
            # –í—ã–±–æ—Ä —à–∞–≥–∞
            step_number = st.slider("–®–∞–≥", 1, len(steps), 1)
            current_step = steps[step_number - 1]
            
            st.markdown(f"### –®–∞–≥ {step_number} –∏–∑ {len(steps)}")
            st.write(current_step["explanation"])
            st.code(current_step["code_state"], language="python")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏
def render_solutions_page():
    st.title("üí° –í—Å–µ —Ä–µ—à–µ–Ω–∏—è")
    
    # –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
    col1, col2 = st.columns([1, 1])
    with col1:
        search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è", "")
    with col2:
        source_options = ["–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "–¢–æ–ª—å–∫–æ –ò–ò", "–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"]
        selected_source = st.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫", source_options)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—à–µ–Ω–∏–π
    solutions = get_solutions()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π
    if search_query:
        solutions = [sol for sol in solutions if search_query.lower() in sol["task_title"].lower()]
    if selected_source == "–¢–æ–ª—å–∫–æ –ò–ò":
        solutions = [sol for sol in solutions if sol["is_ai_generated"]]
    elif selected_source == "–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        solutions = [sol for sol in solutions if not sol["is_ai_generated"]]
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
    if not solutions:
        st.info("–†–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        for solution in solutions:
            with st.container(border=True):
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.subheader(solution["task_title"])
                    author_type = "ü§ñ –ò–ò" if solution["is_ai_generated"] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    st.markdown(f"**–ê–≤—Ç–æ—Ä:** {solution['author']['username']} ({author_type})")
                    st.markdown(f"**–î–æ–±–∞–≤–ª–µ–Ω–æ:** {solution['created_at']}")
                with col2:
                    if st.button("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", key=f"sol_{solution['id']}", use_container_width=True):
                        st.session_state.selected_solution = solution["id"]
                        navigate_to("solution_detail")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
def render_ai_assistant():
    st.title("ü§ñ –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", anchor=False)
    
    if not st.session_state.is_authenticated:
        st.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        if st.button("–í–æ–π—Ç–∏", key="login_ai_assistant"):
            navigate_to("login")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ª—É—á—à–µ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
    chat_col, sidebar_col = st.columns([3, 1])
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —á–∞—Ç–∞–º–∏
    with sidebar_col:
        st.header("–í–∞—à–∏ —á–∞—Ç—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        new_chat_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞", key="new_chat_title_input")
        if st.button("–°–æ–∑–¥–∞—Ç—å —á–∞—Ç", key="create_chat_button"):
            if new_chat_title:
                try:
                    api_url = get_api_url("ai-chats/")
                    print(f"API URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {api_url}")
                    
                    headers = {"Authorization": f"Token {st.session_state.token}"}
                    print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
                    
                    payload = {"title": new_chat_title}
                    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {payload}")
                    
                    response = requests.post(
                        api_url, 
                        json=payload,
                        headers=headers
                    )
                    
                    print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                    print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                    
                    if response.status_code == 201:
                        chat = response.json()
                        st.session_state.selected_chat = chat["id"]
                        st.experimental_rerun()
                    else:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç: {response.status_code} - {response.text}")
                except Exception as e:
                    import traceback
                    error_details = traceback.format_exc()
                    print(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:\n{error_details}")
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç: {str(e)}")
        
        st.divider()
        
        # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤
        chats = get_ai_chats()
        
        # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        print(f"–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chats: {type(chats)}")
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ chats: {chats}")
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫—É —á–∞—Ç–æ–≤
        valid_chats = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if isinstance(chats, list):
            for chat in chats:
                if isinstance(chat, dict) and "id" in chat and "title" in chat:
                    valid_chats.append(chat)
        elif isinstance(chats, dict) and "results" in chats:
            for chat in chats["results"]:
                if isinstance(chat, dict) and "id" in chat and "title" in chat:
                    valid_chats.append(chat)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        for i, chat in enumerate(valid_chats):
            if st.button(chat["title"], key=f"chat_{chat['id']}_{i}", use_container_width=True):
                st.session_state.selected_chat = chat["id"]
                st.experimental_rerun()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
    with chat_col:
        if st.session_state.selected_chat:
            chat = get_ai_chat(st.session_state.selected_chat)
            
            if chat and "title" in chat:
                st.subheader(chat["title"])
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                chat_container = st.container()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                messages = []
                if "messages" in chat and isinstance(chat["messages"], list):
                    messages = chat["messages"]
                
                with chat_container:
                    for message in messages:
                        if isinstance(message, dict) and "role" in message and "content" in message:
                            if message["role"] == "user":
                                with st.chat_message("user"):
                                    st.write(message["content"])
                            elif message["role"] == "assistant":
                                with st.chat_message("assistant"):
                                    st.write(message["content"])
                            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
                
                # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                user_message = st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                if user_message:
                    with st.chat_message("user"):
                        st.write(user_message)
                    
                    with st.spinner("–ò–ò –¥—É–º–∞–µ—Ç..."):
                        try:
                            response = send_ai_message(st.session_state.selected_chat, user_message)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                            if isinstance(response, list):
                                for msg in response:
                                    if isinstance(msg, dict) and msg.get("role") == "assistant":
                                        with st.chat_message("assistant"):
                                            st.write(msg.get("content", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"))
                            elif isinstance(response, str):
                                with st.chat_message("assistant"):
                                    st.write(response)
                            elif isinstance(response, dict):
                                # –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
                                if "content" in response:
                                    with st.chat_message("assistant"):
                                        st.write(response["content"])
                                # –°–ª–æ–≤–∞—Ä—å –∏–∑ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ API
                                elif "response" in response:
                                    with st.chat_message("assistant"):
                                        st.write(response["response"])
                            else:
                                st.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            st.markdown("""
            ### –ß—Ç–æ —É–º–µ–µ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:
            - –ü–æ–º–æ–≥–∞—Ç—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á
            - –û–±—ä—è—Å–Ω—è—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –∫–æ–¥
            - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
            - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
            """)

def main():
    st.title("–í–∏–∑—É–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–µ—à–µ–Ω–∏–π")
    st.write("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

def main():
    try:
        render_navbar()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if st.session_state.current_page == 'tasks':
            render_tasks_page()
        elif st.session_state.current_page == 'ai_assistant':
            render_ai_assistant()
        # –∏ —Ç.–¥.
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        st.code(traceback.format_exc())


if __name__ == "__main__":
    main()