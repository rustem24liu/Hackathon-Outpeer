import streamlit as st
import requests
import pandas as pd
import os
import json
from dotenv import load_dotenv
import openai


load_dotenv()


BACKEND_API_URL = os.getenv('BACKEND_API_URL', 'http://backend:8000/api/')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')


openai.api_key = OPENAI_API_KEY


st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–µ—à–µ–Ω–∏–π",  #Robert —ç—Ç–æ –≤–∞—à–∞ —á–∞—Å—Ç—å
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)


def get_token(username, password):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        response = requests.post(
            f"{BACKEND_API_URL}token/", 
            data={"username": username, "password": password}
        )
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return None

def api_request(endpoint, method='GET', data=None, params=None, token=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    headers = {}
    if token:
        headers["Authorization"] = f"Bearer {token}"
    
    try:
        if method == 'GET':
            response = requests.get(
                f"{BACKEND_API_URL}{endpoint}", 
                headers=headers,
                params=params
            )
        elif method == 'POST':
            response = requests.post(
                f"{BACKEND_API_URL}{endpoint}", 
                headers=headers,
                json=data
            )
        elif method == 'PUT':
            response = requests.put(
                f"{BACKEND_API_URL}{endpoint}", 
                headers=headers,
                json=data
            )
        elif method == 'DELETE':
            response = requests.delete(
                f"{BACKEND_API_URL}{endpoint}", 
                headers=headers
            )
        
        if response.status_code in [200, 201]:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None

def ask_chatgpt(prompt, task_context=""):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT API —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ Rustem —ç—Ç–æ –≤–∞—à–∞ —á–∞—Å—Ç—å"""
    token = st.session_state.get('token')
    if not token:
        st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ChatGPT")
        return None
    
    try:
        response = api_request(
            "chatgpt-assistance/", 
            method='POST', 
            data={"prompt": prompt, "task_context": task_context},
            token=token
        )
        if response:
            return response.get("answer")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
def init_session_state():
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'token' not in st.session_state:
        st.session_state.token = None
    if 'user_info' not in st.session_state:
        st.session_state.user_info = None
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "home"

def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    st.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    with st.form("login_form"):
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submit = st.form_submit_button("–í–æ–π—Ç–∏")
        
        if submit:
            if username and password:
                token_data = get_token(username, password)
                if token_data and 'access' in token_data:
                    st.session_state.token = token_data['access']
                    st.session_state.authenticated = True
                    st.session_state.user_info = {"username": username}
                    st.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                    st.rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å")

def render_home():
    """–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    st.title("üìö –í–∏–∑—É–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–µ—à–µ–Ω–∏–π –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏–π")
    
    st.markdown("""
    ## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∑—É–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ä–µ—à–µ–Ω–∏–π! 
    
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:
    * üß© –°–±–æ—Ä–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    * üí° –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
    * üîÑ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    * ü§ñ –ü–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ—Ç ChatGPT –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
    
    ### –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É:
    * –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è
    * –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ
    * –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ—à–µ–Ω–∏—è, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—è –∏—Ö
    * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏
    
    """)
    
    # –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    st.subheader("üìã –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
    tasks = api_request("tasks/", params={"ordering": "-created_at", "limit": 5}, token=st.session_state.token)
    
    if tasks and 'results' in tasks:
        for task in tasks['results']:
            with st.expander(f"{task['title']} (–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task['complexity']}/10)"):
                st.write(task['description'])
                st.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.get('category_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                st.write(f"–†–µ—à–µ–Ω–∏–π: {task.get('solutions_count', 0)}")
                st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"task_{task['id']}", 
                          on_click=lambda id=task['id']: set_page(f"task_detail_{id}"))
    
    # –ù–µ–¥–∞–≤–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    st.subheader("üí° –ù–µ–¥–∞–≤–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è")
    solutions = api_request("solutions/", params={"ordering": "-created_at", "limit": 5}, token=st.session_state.token)
    
    if solutions and 'results' in solutions:
        for solution in solutions['results']:
            with st.expander(f"{solution['title']} ({solution.get('task_title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})"):
                st.write(solution['description'][:200] + "..." if len(solution['description']) > 200 else solution['description'])
                st.write(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π: {solution.get('reproductions_count', 0)}")
                st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"solution_{solution['id']}", 
                          on_click=lambda id=solution['id']: set_page(f"solution_detail_{id}"))

def render_tasks():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞–Ω–∏–π"""
    st.title("üìã –ó–∞–¥–∞–Ω–∏—è")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        categories = api_request("categories/", token=st.session_state.token)
        category_options = ["–í—Å–µ"] + [cat['name'] for cat in categories] if categories else ["–í—Å–µ"]
        selected_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", category_options)
    
    with col2:
        complexity = st.slider("–°–ª–æ–∂–Ω–æ—Å—Ç—å", 1, 10, (1, 10))
    
    with col3:
        search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {"ordering": "-created_at"}
    if selected_category != "–í—Å–µ" and categories:
        category_id = next((cat['id'] for cat in categories if cat['name'] == selected_category), None)
        if category_id:
            params["category"] = category_id
    
    if complexity:
        params["complexity__gte"] = complexity[0]
        params["complexity__lte"] = complexity[1]
    
    if search_query:
        params["search"] = search_query
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
    tasks = api_request("tasks/", params=params, token=st.session_state.token)
    
    if tasks and 'results' in tasks:
        for task in tasks['results']:
            with st.expander(f"{task['title']} (–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task['complexity']}/10)"):
                st.write(task['description'])
                st.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.get('category_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                st.write(f"–†–µ—à–µ–Ω–∏–π: {task.get('solutions_count', 0)}")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"task_detail_{task['id']}", 
                              on_click=lambda id=task['id']: set_page(f"task_detail_{id}"))
                with col2:
                    st.button("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—à–µ–Ω–∏–π", key=f"task_solutions_{task['id']}", 
                              on_click=lambda id=task['id']: set_page(f"task_solutions_{id}"))
    else:
        st.info("–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")

def render_solutions():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ—à–µ–Ω–∏–π"""
    st.title("üí° –†–µ—à–µ–Ω–∏—è")
    
    # –§–∏–ª—å—Ç—Ä—ã
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Ä–µ—à–µ–Ω–∏—è–º")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {"ordering": "-created_at"}
    if search_query:
        params["search"] = search_query
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
    solutions = api_request("solutions/", params=params, token=st.session_state.token)
    
    if solutions and 'results' in solutions:
        for solution in solutions['results']:
            with st.expander(f"{solution['title']} ({solution.get('task_title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})"):
                st.write(solution['description'][:200] + "..." if len(solution['description']) > 200 else solution['description'])
                st.write(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π: {solution.get('reproductions_count', 0)}")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"sol_detail_{solution['id']}", 
                              on_click=lambda id=solution['id']: set_page(f"solution_detail_{id}"))
                with col2:
                    st.button("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π", key=f"sol_reproductions_{solution['id']}", 
                              on_click=lambda id=solution['id']: set_page(f"solution_reproductions_{id}"))
    else:
        st.info("–†–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")

def render_ai_assistant():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    st.title("ü§ñ ChatGPT –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    
    st.markdown("""
    ## –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ—â—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    
    ChatGPT –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º:
    * –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —É—Å–ª–æ–≤–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
    * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    * –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    """)
    
    # –í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    tasks = api_request("tasks/", token=st.session_state.token)
    task_options = ["–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"] + [task['title'] for task in tasks['results']] if tasks and 'results' in tasks else ["–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"]
    selected_task = st.selectbox("–ó–∞–¥–∞–Ω–∏–µ", task_options)
    
    task_context = ""
    if selected_task != "–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" and tasks and 'results' in tasks:
        task = next((t for t in tasks['results'] if t['title'] == selected_task), None)
        if task:
            task_context = f"{task['title']}\n\n{task['description']}"
            st.info(f"–í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {task['title']}")
    
    # –§–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    st.subheader("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É")
    with st.form("ai_assistant_form"):
        prompt = st.text_area("–í–∞—à –≤–æ–ø—Ä–æ—Å", height=150)
        submit = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
        
        if submit and prompt:
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT..."):
                answer = ask_chatgpt(prompt, task_context)
                if answer:
                    st.session_state.ai_answer = answer
                    st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if 'ai_answer' in st.session_state:
        st.subheader("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:")
        st.markdown(st.session_state.ai_answer)
        
        # –û–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ"):
            if selected_task != "–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" and tasks and 'results' in tasks:
                task = next((t for t in tasks['results'] if t['title'] == selected_task), None)
                if task:
                    st.session_state.create_solution_task_id = task['id']
                    st.session_state.create_solution_ai_answer = st.session_state.ai_answer
                    st.session_state.current_page = "create_solution"
                    st.rerun()
            else:
                st.warning("–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

def set_page(page):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    st.session_state.current_page = page
    st.rerun()

def render_sidebar():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    with st.sidebar:
        st.image("https://via.placeholder.com/150x150.png?text=VL", width=150)
        st.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        if st.session_state.authenticated:
            st.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {st.session_state.user_info['username']}")
            
            st.button("üè† –ì–ª–∞–≤–Ω–∞—è", on_click=lambda: set_page("home"))
            st.button("üìã –ó–∞–¥–∞–Ω–∏—è", on_click=lambda: set_page("tasks"))
            st.button("üí° –†–µ—à–µ–Ω–∏—è", on_click=lambda: set_page("solutions"))
            st.button("üîÑ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", on_click=lambda: set_page("reproductions"))
            st.button("ü§ñ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", on_click=lambda: set_page("ai_assistant"))
            
            st.divider()
            st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", on_click=lambda: set_page("create_task"))
            
            st.divider()
            if st.button("–í—ã–π—Ç–∏"):
                st.session_state.authenticated = False
                st.session_state.token = None
                st.session_state.user_info = None
                st.rerun()
        else:
            st.info("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")

def render_page():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    current_page = st.session_state.current_page
    
    if not st.session_state.authenticated:
        login_page()
        return
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    if current_page == "home":
        render_home()
    elif current_page == "tasks":
        render_tasks()
    elif current_page == "solutions":
        render_solutions()
    elif current_page == "reproductions":
        st.title("üîÑ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
        st.info("–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif current_page == "ai_assistant":
        render_ai_assistant()
    elif current_page == "create_task":
        st.title("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
        st.info("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif current_page.startswith("task_detail_"):
        task_id = current_page.split("_")[-1]
        st.title("–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è")
        st.write(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏ {task_id}...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞–Ω–∏—è
    elif current_page.startswith("solution_detail_"):
        solution_id = current_page.split("_")[-1]
        st.title("–î–µ—Ç–∞–ª–∏ —Ä–µ—à–µ–Ω–∏—è")
        st.write(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—à–µ–Ω–∏–∏ {solution_id}...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—à–µ–Ω–∏—è
    else:
        st.error("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        set_page("home")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_session_state()
    render_sidebar()
    render_page()

if __name__ == "__main__":
    main()
